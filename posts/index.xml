<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on WY Seo Blog</title>
    <link>https://lucaseo.github.io/posts/</link>
    <description>Recent content in Posts on WY Seo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Wonyoung Seo 2021</copyright>
    <lastBuildDate>Wed, 10 Feb 2021 14:29:33 +0900</lastBuildDate><atom:link href="https://lucaseo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[KR] 알고리즘 복잡도</title>
      <link>https://lucaseo.github.io/posts/2021-02-10-complexity/</link>
      <pubDate>Wed, 10 Feb 2021 14:29:33 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2021-02-10-complexity/</guid>
      <description>title: &amp;ldquo;[KR] &amp;quot; date: 2020-01-09T14:24:01+09:00 categories: [&amp;quot;&amp;quot;] tags: [&amp;quot;&amp;rdquo;, &amp;ldquo;&amp;quot;] showToc: true TocOpen: true comments: true math: false draft: false  애매모호하게만 알고 있는 자료구조를 다시 공부하고 정리하는 포스트입니다. 잘 못 이해하고 있는 부분이 있다면 주저없이 지적 부탁 드립니다 :)
 1. 알고리즘 복잡도 1.1. 개념 1.1.1. 알고리즘 복잡도 계산이 필요한 이유  하나의 문제를 푸는 방법(알고리즘)은 다양할 수 있음. 여러가지 방법 중 어느 방법이 더 좋은지를 분석하기 위해 복잡도를 정의하고 계산함.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Wagon Wheel Effect &amp; Aliasing</title>
      <link>https://lucaseo.github.io/posts/2020-06-20-dsp-basic-s01-9/</link>
      <pubDate>Sat, 20 Jun 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-06-20-dsp-basic-s01-9/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  The Wagon Wheel Effect 빠르게 회전하는 바퀴나 물체를 보면 처음에는 반시계 방향으로 회전하는가 싶더니, 어느 순간부터 반대로 시계방향으로 회전하는 것 같은 환영을 볼 수 있다. 아니면 분명히 바퀴는 빠르게 회전하는데, 느리게 회전하는 것처럼 보일 때도 있다. 바로 undersampling과 alias 로 인해 발생하는 현상인데, 명칭은 Wagon Wheel Effect(마차바퀴현상)라 한다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: 나이퀴스트 샘플링 법칙 (Nyquist Sampling Theorum)</title>
      <link>https://lucaseo.github.io/posts/2020-06-07-dsp-basic-s01-8/</link>
      <pubDate>Sun, 07 Jun 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-06-07-dsp-basic-s01-8/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  The Nyquist-Shannon Sampling Theorem 신호처리에서 Oversampling과 undersampling을 방지하고도, 여전히 신호를 잘 표현할 수 있는 sampling rate(샘플링주기)는 어떻게 선택할 수 있을까? 샘플링 주기는 주로 나이퀴스트-섀넌 샘플링 법칙(Nyquist-Shannon Sampling Theorum)를 따른다.
이 샘플링 법칙은 다음과 같이 정의된다.
 만일 어떠한 신호 그 어떤 frequency도 B hertz보다 높지 않다면, 1/(2B) 초 간격으로 샘플링을 하면 된다.</description>
    </item>
    
    <item>
      <title>[KR] 글또 4기 다짐글</title>
      <link>https://lucaseo.github.io/posts/2020-02-23-init-geultto-4th/</link>
      <pubDate>Sun, 23 Feb 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-02-23-init-geultto-4th/</guid>
      <description>신년을 맞이하기 직전, 신년을 맞이한 직후 우리는 온갖 계획과 다짐을 세운다. 어느 시점에서부터인가 계획을 세우는 게 무의미하다고 생각이 들기도 했지만, 올해도 어김 없이 그럴 듯한 다짐을 해본다. 또 속아 넘어가는 기분이지만, 이번만큼은 다르다고 해두자.
 글또를 참여하게 됐다.    Source: 글또   &amp;amp;nbsp
데이터 직군으로 취업을 한 이후로 많은 사람들이 그랬던 것처럼 나도 일하면서 필요하거나 막히는 것들에 대한 해결책을 능력자들의 블로그나 브런치, Medium과 같은 플랫폼을 통해 접하고 있다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Trigonomatry</title>
      <link>https://lucaseo.github.io/posts/2020-01-25-dsp-basic-s01-7/</link>
      <pubDate>Sat, 25 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-25-dsp-basic-s01-7/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  The Unit Circle : Trigonometry review unit circle(단위원)과 radian(라디안) Sine wave와 cosine wave를 설명하는 과정에서 단위원을 따라 회전하는 선의 길이와 움직임을 묘사했었다. 이 단위원의 둘레는 phase(위상)라고 하는데, X축과 회전하는 선이 이루는 각도라고 생각할 수 있다. 아니, 각도를 사용하지 않고 라디안(radians)을 사용하도록 하자.
우리는 원의 둘레를 360도라고 배웠는데, 이번에는 2pi radians(라디안)이라고 불러보자(원의 둘레는 2pi라는 것도 배운 바 있다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Sine Wave</title>
      <link>https://lucaseo.github.io/posts/2020-01-23-dsp-basic-s01-6/</link>
      <pubDate>Thu, 23 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-23-dsp-basic-s01-6/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  Periodic Movement and the Circle Sine wave(사인파, 정현파)는, 어떠한 선이 원을 그리며 회전할 때의 모습으로 묘사할 수 있다. Sine wave는 회전하는 선과 Y축 수직의 길이가 밀접한 관계를 보인다.
sine wave의 amplitude로 볼 수 있다. 수직의 길이가 길 수록 amplitude의 폭이 크고, 짧을 수록 amplitude의 폭이 작다.</description>
    </item>
    
    <item>
      <title>[KR] Pandas 1.0.0 : 바뀐 점을 ARABOJA</title>
      <link>https://lucaseo.github.io/posts/2020-01-16-pandas-new-release/</link>
      <pubDate>Thu, 16 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-16-pandas-new-release/</guid>
      <description>Major Release !! Pandas 1.0.0 import pandas as pd로 우리에게 익숙한 Pandas. 데이터 분석을 위한 라이브러리라는 사실을 모르는 사람은 거의 없을 것이다. 하지만 부끄럽게도 나는 판다스의 버전조차 모른 상태로 여태껏 공식 문서와 Stackoverflow를 통해서만 사용하고 있었다. 마침 1월 9일 Pandas 1.0.0이 배포되었고, 이번 기회에 1.0.0에서 평소 자주 썼던 부분들을 위주로 중요한 업데이트들을 훑어보고 정리해보고자 한다.
 dataframe.info() 깔끔해진 DataFrame summary DataFrame 요약 기능이 조금 보기 좋은 형태로 개선되었다.
다음과 같은 예제 DataFrame이 있다고 할 때,</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Timbre</title>
      <link>https://lucaseo.github.io/posts/2020-01-15-dsp-basic-s01-5/</link>
      <pubDate>Wed, 15 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-15-dsp-basic-s01-5/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  Timbre Harmonics, Overtones, and Wave Shapes 물체가 반복적으로 패턴을 보이며 진동할 경우, 우리의 귀는 pressure wave(압력파)를 음조(tone)이나 음의 높이(pitch)로 해석한다. 반대로 물체의 진동이 반복적이지 않거나, 예측 불가한 패턴으로 진동할 경우 우리의 귀는 이를 소음(noise)나 조성이 없는 형태(atonal)로 받아들이게 된다.
각기 다른 패턴의 진동은 곧 각기 다른 음색(timbre)으로 연결 된다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Sound Waves</title>
      <link>https://lucaseo.github.io/posts/2020-01-13-dsp-basic-s01-4/</link>
      <pubDate>Mon, 13 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-13-dsp-basic-s01-4/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  Definition and Waves &amp;lsquo;사운드&amp;rsquo;란 공기나 물 같은 매질을 통해 전파되는 공기 압력의 파동이다. 어떤 물체가 진동을 하면 그 즉시 주변에 있는 입자들을 밀고 당기게 되는데, 이 입자들의 움직임과 압력으로 인해 이웃한 입자들로 퍼져나가거나, 빈 공간이 생기면서 압력이 낮아지고 주위의 다른 입자들이 당겨져 공간이 채워지는 움직임을 한다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Sampling &amp; Aliasing</title>
      <link>https://lucaseo.github.io/posts/2020-01-12-dsp-basic-s01-3/</link>
      <pubDate>Sun, 12 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-12-dsp-basic-s01-3/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  이산신호 해석하기 Don&amp;rsquo;t connect the dots! 이산신호를 다룰 경우, 섣불리 각 점을 이어 interpolation(보간법: 중간 값을 채워 넣음)을 해서는 안 된다. 지난 번 비행 고도의 예시를 들어 보자.
   &amp;amp;nbsp
누군가 65분 당시의 고도를 물어본다면, 어떻게 답할 수 있을까? 우리는 당장 60분, 70분의 두 기록을 가지고 있을 뿐이니까, 그냥 단순히 두 점 사이에 선을 그어 31,000 이라고 답을 하고 싶을 수 있지&amp;hellip;만 그럴 때는 그냥 **모른다(I don&amp;rsquo;t know)**고 하는 게 정확하다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: Discrete Signals</title>
      <link>https://lucaseo.github.io/posts/2020-01-11-dsp-basic-s01-2/</link>
      <pubDate>Sat, 11 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-11-dsp-basic-s01-2/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  Discrete Signals (이산 신호) Sampling and Signal Notation(샘플링과 신호의 표기)
&amp;amp;nbsp
Sampling 어떠한 분량을 주기적으로 측정하는 행위를 샘플링(sampling), 그렇게 측정된 각각의 값을 샘플(sample)이라고 한다. 이산신호는 연속신호를 샘플링한 샘플의 모음이라고 보면 된다.
예를 들어 두시간 동안 비행하는 비행기의 고도를 측정할 때, 10분마다 한번씩 고도를 잰다고 하면, 이것이 바로 비행기 고도를 샘플링 함으로서 이산신호를 생성하는 것이라고 볼 수 있다.</description>
    </item>
    
    <item>
      <title>[KR] 비전공자의 DSP 맛보기 시즌 1: 신호란?</title>
      <link>https://lucaseo.github.io/posts/2020-01-10-dsp-basic-s01-1/</link>
      <pubDate>Fri, 10 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-10-dsp-basic-s01-1/</guid>
      <description>본 글은 Ableton사에서 소프트웨어 개발자로 재직 중인 Jack Schaedler님의 DSP 입문 자료 Seeing Circles, Sines And Signals 를 통해 공부하면서 다시 풀어서 정리한 내용입니다.
  신호란? Continuous(연속) VS. Discrete(이산)
 신호(signal)은 물리적 현상 및 행동을 묘사한다.  시간의 흐름에 따른 신호 → time-domain signal 시간에 흐름에 따라 바뀌는 것들의 예시  비행기의 고도 변화 도시의 온도 변화 자동차의 속도      &amp;amp;nbsp
DSP (digital signal processing) DSP는 real-world signal을 컴퓨터에서 측정, 기록, 처리, 분석하기 위한 모든 과정을 포함하는 영역을 말한다.</description>
    </item>
    
    <item>
      <title>[KR] 로컬 환경에 엘라스틱서치, 키바나 설치하기</title>
      <link>https://lucaseo.github.io/posts/2020-01-09-elasticsearch-kibana-local-env/</link>
      <pubDate>Thu, 09 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-09-elasticsearch-kibana-local-env/</guid>
      <description>로컬 머신에서의 디렉토리 만들기 $ mkdir elasticstack $ cd elasticstack &amp;amp;nbsp
01. Elasticsearch(엘라스틱서치) 설치 다운로드 Linux
$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.1.tar.gz MacOS
$ curl -O https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.6.1.tar.gz 이하 리눅스 기준
&amp;amp;nbsp
압축 풀기 $ tar -xzvf elasticsearch-6.6.1.tar.gz $ rm elasticsearch-6.6.1.tar.gz &amp;amp;nbsp
Heap 사이즈 조정 $ cd ~ $ cd elastic/elasticsearch-6.6.1./config $ vi jvm.options -Xms2g -Xmx2g &amp;amp;nbsp
클러스터 정보 / 접근 IP 설정 $ cd ~ $ cd elastic/elasticsearch-6.6.1./config $ vi elasticsearch.yml ### For ClusterName &amp;amp; Node Name cluster.</description>
    </item>
    
    <item>
      <title>[KR] 엘라스틱스택(Elastic Stack) 소개</title>
      <link>https://lucaseo.github.io/posts/2020-01-05-elastic-stack/</link>
      <pubDate>Sun, 05 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-05-elastic-stack/</guid>
      <description>Elastic Stack이란 Elastic Stack 이란 모든 유형의 데이터(특히 비정형 데이터)를 저장, 실시간으로 검색, 분석 및 시각화 할 수 있도록 도와주는 Elastic의 오픈소스 서비스 제품이다. 기존에 Elasticsearch, Logstash, Kibana를 같이 묶어 ELK 라는 서비스명으로 제공하기 시작했고, 현재 Beats가 포함되어 Elastic Stack 혹은 ELK Stack이란 이름으로 서비스가 제공되고 있다.
Elastic Stack의 구성    &amp;amp;nbsp
   종류 기능 특이점     Elasticsearch 데이터 검색, 분석, 저장    Kibana 데이터 시각화, 분석    Logstash 데이터 수집, 변환, 운송 데이터 처리 파이프라인.</description>
    </item>
    
    <item>
      <title>[KR] 첫 포스팅</title>
      <link>https://lucaseo.github.io/posts/2020-01-02-first-post/</link>
      <pubDate>Thu, 02 Jan 2020 14:24:01 +0900</pubDate>
      
      <guid>https://lucaseo.github.io/posts/2020-01-02-first-post/</guid>
      <description>꾸준히 하지 못 했지만, 꾸준히 해보려고 합니다. 시작이 반이니까요.</description>
    </item>
    
  </channel>
</rss>
